package fi.helsinki.cs.thois.lapreader.ui.gui;

import fi.helsinki.cs.thois.lapreader.Controller;
import fi.helsinki.cs.thois.lapreader.model.Model;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 * List view is abstract base form for all windows including listings in table
 * format
 */
public abstract class ListView extends javax.swing.JFrame {

    /**
     * Creates new form ListView
     */
    public ListView() {
        initComponents();
    }

    /**
     * Creates new form and attachs a controller
     * @param controller links form to the main logic
     */
    public ListView(Controller controller) {
        initComponents();
        this.controller = controller;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        showButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        listTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        showButton.setText("Show");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");

        listTitle.setText("Title");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addContainerGap(209, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(listTitle)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showButton)
                    .addComponent(addButton)
                    .addComponent(deleteButton))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Inserts new row to the table in the form. Provides functionality to add
     * button.
     * @param evt event that fired
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.addRow(new Object[columnNames.length]);
        jTable1.editCellAt(model.getRowCount()-1, 0);
        Component editor = jTable1.getEditorComponent();  
        editor.requestFocusInWindow();
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Empty functionality to deleteButton to be overridden in inherited classes 
     * @param evt event that happened
     */
    public void deleteButtonActionPerformed(ActionEvent evt) {
    }
    
    /**
     * Empty functionality to showButton to be overridden in inherited classes 
     * @param evt event that happened
     */
    public void showButtonActionPerformed(ActionEvent evt) {
    }
    
    public void setController(Controller controller) {
        this.controller = controller;
    }
    
    /**
     * Constructs table from models to be displayed in jTable
     * @param models to be displayed
     * @param columns number of columns
     * @return formatted table
     */
    private Object[][] constructTable(List<Model> models, int columns) {
        Object[][] data;
        if (models == null) {
            data = new Object[0][columns];
        } else {
            data = new Object[models.size()][columns];
            for (int i = 0; i < models.size(); i++)
                data[i] = models.get(i).getRowData();
        }
        return data;
    }
    
    /**
     * Refreshes data in the form
     * @param models to be displayed in jTable
     */
    protected void refreshData(List<Model> models) {
        Object[][] data = constructTable(models, columnNames.length);
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setDataVector(data, columnNames);
    }
    
    /**
     * Displays Database error message with messageDialog
     */
    protected void displaySqlError() {
        JOptionPane.showMessageDialog(this,
                "Database error! Restart app and try again.");
    }
    
    /**
     * Empty functionality to changed row to be overridden in inherited classes
     * @param row that changed
     */
    public void rowChangedAction(int row) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton addButton;
    protected javax.swing.JButton deleteButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JTable jTable1;
    protected javax.swing.JLabel listTitle;
    protected javax.swing.JButton showButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Link to programs main logic
     */
    protected Controller controller;
    
    /**
     * Column names in jTable
     */
    protected Object[] columnNames;
}
